/*
 * mygame.cpp: 本檔案儲遊戲本身的class的implementation
 * Copyright (C) 2002-2008 Woei-Kae Chen <wkc@csie.ntut.edu.tw>
 *
 * This file is part of game, a free game development framework for windows.
 *
 * game is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * game is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * History:
 *   2002-03-04 V3.1
 *          Add codes to demostrate the use of CMovingBitmap::ShowBitmap(CMovingBitmap &).
 *	 2004-03-02 V4.0
 *      1. Add CGameStateInit, CGameStateRun, and CGameStateOver to
 *         demonstrate the use of states.
 *      2. Demo the use of CInteger in CGameStateRun.
 *   2005-09-13
 *      Rewrite the codes for CBall and CEraser.
 *   2005-09-20 V4.2Beta1.
 *   2005-09-29 V4.2Beta2.
 *      1. Add codes to display IDC_GAMECURSOR in GameStateRun.
 *   2006-02-08 V4.2
 *      1. Revise sample screens to display in English only.
 *      2. Add code in CGameStateInit to demo the use of PostQuitMessage().
 *      3. Rename OnInitialUpdate() -> OnInit().
 *      4. Fix the bug that OnBeginState() of GameStateInit is not called.
 *      5. Replace AUDIO_CANYON as AUDIO_NTUT.
 *      6. Add help bitmap to CGameStateRun.
 *   2006-09-09 V4.3
 *      1. Rename Move() and Show() as OnMove and OnShow() to emphasize that they are
 *         event driven.
 *   2006-12-30
 *      1. Bug fix: fix a memory leak problem by replacing PostQuitMessage(0) as
 *         PostMessage(AfxGetMainWnd()->m_hWnd, WM_CLOSE,0,0).
 *   2008-02-15 V4.4
 *      1. Add namespace game_framework.
 *      2. Replace the demonstration of animation as a new bouncing ball.
 *      3. Use ShowInitProgress(percent) to display loading progress. 
*/

#include "stdafx.h"
#include "Resource.h"
#include <mmsystem.h>
#include <ddraw.h>
#include <dsound.h>
#include <dmusici.h>
#include "gamelib.h"
#include "mygame.h"
#include <ctime>
#include <cstdlib>


namespace game_framework {

/////////////////////////////////////////////////////////////////////////////
// CBall: Ball class
/////////////////////////////////////////////////////////////////////////////

CBall::CBall()
{
	is_alive = true;
	x = y = dx = dy = index = delay_counter = 0;
}

bool CBall::HitEraser(CEraser *eraser)
{
	// 檢測擦子所構成的矩形是否碰到球
	return HitRectangle(eraser->GetX1(), eraser->GetY1(),
		   eraser->GetX2(), eraser->GetY2());
}

bool CBall::HitRectangle(int tx1, int ty1, int tx2, int ty2)
{
	int x1 = x+dx;				// 球的左上角x座標
	int y1 = y+dy;				// 球的左上角y座標
	int x2 = x1 + bmp.Width();	// 球的右下角x座標
	int y2 = y1 + bmp.Height();	// 球的右下角y座標
	//
	// 檢測球的矩形與參數矩形是否有交集
	//
	return (tx2 >= x1 && tx1 <= x2 && ty2 >= y1 && ty1 <= y2);
}

bool CBall::IsAlive()
{
	return is_alive;
}

void CBall::LoadBitmap()
{
	bmp.LoadBitmap(IDB_BALL,RGB(0,0,0));			// 載入球的圖形
	bmp_center.LoadBitmap(IDB_CENTER,RGB(0,0,0));	// 載入球圓心的圖形
}

void CBall::OnMove()
{
	if (!is_alive)
		return;
	delay_counter--;
	if (delay_counter < 0) {
		delay_counter = delay;
		//
		// 計算球向對於圓心的位移量dx, dy
		//
		const int STEPS=18;
		static const int DIFFX[]={35, 32, 26, 17, 6, -6, -17, -26, -32, -34, -32, -26, -17, -6, 6, 17, 26, 32, };
		static const int DIFFY[]={0, 11, 22, 30, 34, 34, 30, 22, 11, 0, -11, -22, -30, -34, -34, -30, -22, -11, };
		index++;
		if (index >= STEPS)
			index = 0;
		dx = DIFFX[index];
		dy = DIFFY[index];
	}
}

void CBall::SetDelay(int d)
{
	delay = d;
}

void CBall::SetIsAlive(bool alive)
{
	is_alive = alive;
}

void CBall::SetXY(int nx, int ny)
{
	x = nx; y = ny;
}

void CBall::OnShow()
{
	if (is_alive) {
		bmp.SetTopLeft(x+dx,y+dy);
		bmp.ShowBitmap();
		bmp_center.SetTopLeft(x,y);
		bmp_center.ShowBitmap();
	}
}

/////////////////////////////////////////////////////////////////////////////
// CBouncingBall: BouncingBall class
/////////////////////////////////////////////////////////////////////////////

CBouncingBall::CBouncingBall()
{
	const int INITIAL_VELOCITY = 20;	// 初始上升速度
	const int FLOOR = 400;				// 地板座標
	floor = FLOOR;
	x = 95; y = FLOOR-1;				// y座標比地板高1點(站在地板上)
	rising = true; 
	initial_velocity = INITIAL_VELOCITY;
	velocity = initial_velocity;
}

void CBouncingBall::LoadBitmap()
{
	char *filename[4]={".\\bitmaps\\ball1.bmp",".\\bitmaps\\ball2.bmp",".\\bitmaps\\ball3.bmp",".\\bitmaps\\ball4.bmp"};
	for (int i = 0; i < 4; i++)	// 載入動畫(由4張圖形構成)
		animation.AddBitmap(filename[i], RGB(0,0,0));
}

void CBouncingBall::OnMove()
{
	if (rising) {			// 上升狀態
		if (velocity > 0) {
			y -= velocity;	// 當速度 > 0時，y軸上升(移動velocity個點，velocity的單位為 點/次)
			velocity--;		// 受重力影響，下次的上升速度降低
		} else {
			rising = false; // 當速度 <= 0，上升終止，下次改為下降
			velocity = 1;	// 下降的初速(velocity)為1
		}
	} else {				// 下降狀態
		if (y < floor-1) {  // 當y座標還沒碰到地板
			y += velocity;	// y軸下降(移動velocity個點，velocity的單位為 點/次)
			velocity++;		// 受重力影響，下次的下降速度增加
		} else {
			y = floor - 1;  // 當y座標低於地板，更正為地板上
			rising = true;	// 探底反彈，下次改為上升
			velocity = initial_velocity; // 重設上升初始速度
		}
	}
	animation.OnMove();		// 執行一次animation.OnMove()，animation才會換圖
}

void CBouncingBall::OnShow()
{
	animation.SetTopLeft(x,y);
	animation.OnShow();
}

/////////////////////////////////////////////////////////////////////////////
// CEraser: Eraser class
/////////////////////////////////////////////////////////////////////////////

CEraser::CEraser()
{
	Initialize();
}

int CEraser::GetX1()
{
	return x;
}

int CEraser::GetY1()
{
	return y;
}

int CEraser::GetX2()
{
	return x + animation.Width();
}

int CEraser::GetY2()
{
	return y + animation.Height();
}

void CEraser::Initialize()
{
	const int X_POS = 280;
	const int Y_POS = 400;
	x = X_POS;
	y = Y_POS;
	isMovingLeft = isMovingRight= isMovingUp = isMovingDown = false;
}

void CEraser::LoadBitmap()
{
	animation.AddBitmap(IDB_ERASER1,RGB(255,255,255));
	animation.AddBitmap(IDB_ERASER2,RGB(255,255,255));
	animation.AddBitmap(IDB_ERASER3,RGB(255,255,255));
	animation.AddBitmap(IDB_ERASER2,RGB(255,255,255));
}

void CEraser::OnMove()
{
	const int STEP_SIZE = 2;
	animation.OnMove();
	if (isMovingLeft)
		x -= STEP_SIZE;
	if (isMovingRight)
		x += STEP_SIZE;
	if (isMovingUp)
		y -= STEP_SIZE;
	if (isMovingDown)
		y += STEP_SIZE;
}

void CEraser::SetMovingDown(bool flag)
{
	isMovingDown = flag;
}

void CEraser::SetMovingLeft(bool flag)
{
	isMovingLeft = flag;
}

void CEraser::SetMovingRight(bool flag)
{
	isMovingRight = flag;
}

void CEraser::SetMovingUp(bool flag)
{
	isMovingUp = flag;
}

void CEraser::SetXY(int nx, int ny)
{
	x = nx; y = ny;
}

void CEraser::OnShow()
{
	animation.SetTopLeft(x,y);
	animation.OnShow();
}

/////////////////////////////////////////////////////////////////////////////
// 這個class為遊戲的遊戲開頭畫面物件
/////////////////////////////////////////////////////////////////////////////

CGameStateInit::CGameStateInit(CGame *g)
: CGameState(g)
{
}

void CGameStateInit::OnInit()
{
	//
	// 當圖很多時，OnInit載入所有的圖要花很多時間。為避免玩遊戲的人
	//     等的不耐煩，遊戲會出現「Loading ...」，顯示Loading的進度。
	//
	ShowInitProgress(0);	// 一開始的loading進度為0%
	//
	// 開始載入資料
	//
	logo.LoadBitmap(IDB_BACKGROUND);
	Sleep(300);				// 放慢，以便看清楚進度，實際遊戲請刪除此Sleep
	//
	// 此OnInit動作會接到CGameStaterRun::OnInit()，所以進度還沒到100%
	//
}

void CGameStateInit::OnBeginState()
{
}

void CGameStateInit::OnKeyUp(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	const char KEY_ESC = 27;
	const char KEY_SPACE = ' ';
	if (nChar == KEY_SPACE)
		GotoGameState(GAME_STATE_RUN);						// 切換至GAME_STATE_RUN
	else if (nChar == KEY_ESC)								// Demo 關閉遊戲的方法
		PostMessage(AfxGetMainWnd()->m_hWnd, WM_CLOSE,0,0);	// 關閉遊戲
}

void CGameStateInit::OnLButtonDown(UINT nFlags, CPoint point)
{
	GotoGameState(GAME_STATE_RUN);		// 切換至GAME_STATE_RUN
}

void CGameStateInit::OnShow()
{
	//
	// 貼上logo
	//
	logo.SetTopLeft((SIZE_X - logo.Width())/2, SIZE_Y/8);
	logo.ShowBitmap();
	//
	// Demo螢幕字型的使用，不過開發時請盡量避免直接使用字型，改用CMovingBitmap比較好
	//
	CDC *pDC = CDDraw::GetBackCDC();			// 取得 Back Plain 的 CDC 
	CFont f,*fp;
	f.CreatePointFont(160,"Times New Roman");	// 產生 font f; 160表示16 point的字
	fp=pDC->SelectObject(&f);					// 選用 font f
	pDC->SetBkColor(RGB(0,0,0));
	pDC->SetTextColor(RGB(255,255,0));
	pDC->TextOut(120,220,"Please click mouse or press SPACE to begin.");
	pDC->TextOut(5,395,"Press Ctrl-F to switch in between window mode and full screen mode.");
	if (ENABLE_GAME_PAUSE)
		pDC->TextOut(5,425,"Press Ctrl-Q to pause the Game.");
	pDC->TextOut(5,455,"Press Alt-F4 or ESC to Quit.");
	pDC->SelectObject(fp);						// 放掉 font f (千萬不要漏了放掉)
	CDDraw::ReleaseBackCDC();					// 放掉 Back Plain 的 CDC
}								

/////////////////////////////////////////////////////////////////////////////
// 這個class為遊戲的結束狀態(Game Over)
/////////////////////////////////////////////////////////////////////////////

CGameStateOver::CGameStateOver(CGame *g)
: CGameState(g)
{
}

void CGameStateOver::OnMove()
{
	counter--;
	if (counter < 0)
		GotoGameState(GAME_STATE_INIT);
}

void CGameStateOver::OnBeginState()
{
	counter = 30 * 5; // 5 seconds
}

void CGameStateOver::OnInit()
{
	//
	// 當圖很多時，OnInit載入所有的圖要花很多時間。為避免玩遊戲的人
	//     等的不耐煩，遊戲會出現「Loading ...」，顯示Loading的進度。
	//
	ShowInitProgress(66);	// 接個前一個狀態的進度，此處進度視為66%
	//
	// 開始載入資料
	//
	Sleep(300);				// 放慢，以便看清楚進度，實際遊戲請刪除此Sleep
	//
	// 最終進度為100%
	//
	ShowInitProgress(100);
}

void CGameStateOver::OnShow()
{
	CDC *pDC = CDDraw::GetBackCDC();			// 取得 Back Plain 的 CDC 
	CFont f,*fp;
	f.CreatePointFont(160,"Times New Roman");	// 產生 font f; 160表示16 point的字
	fp=pDC->SelectObject(&f);					// 選用 font f
	pDC->SetBkColor(RGB(0,0,0));
	pDC->SetTextColor(RGB(255,255,0));
	char str[80];								// Demo 數字對字串的轉換
	sprintf(str, "Game Over ! (%d)", counter / 30);
	pDC->TextOut(240,210,str);
	pDC->SelectObject(fp);						// 放掉 font f (千萬不要漏了放掉)
	CDDraw::ReleaseBackCDC();					// 放掉 Back Plain 的 CDC
}

/////////////////////////////////////////////////////////////////////////////
// 這個class為遊戲的遊戲執行物件，主要的遊戲程式都在這裡
/////////////////////////////////////////////////////////////////////////////

CGameStateRun::CGameStateRun(CGame *g)
: CGameState(g), NUMBALLS(28)
{
	ball = new CBall [NUMBALLS];
	enemy = new Cenemy[5];
}

CGameStateRun::~CGameStateRun()
{
	delete [] ball;
	delete [] enemy;
}

void CGameStateRun::OnBeginState()
{
	const int BALL_GAP = 90;
	const int BALL_XY_OFFSET = 45;
	const int BALL_PER_ROW = 7;
	const int HITS_LEFT = 10;
	const int HITS_LEFT_X = 590;
	const int HITS_LEFT_Y = 0;
	const int BACKGROUND_X = 60;
	const int ANIMATION_SPEED = 15;
	for (int i = 0; i < NUMBALLS; i++) {				// 設定球的起始座標
		int x_pos = i % BALL_PER_ROW;
		int y_pos = i / BALL_PER_ROW;
		ball[i].SetXY(x_pos * BALL_GAP + BALL_XY_OFFSET, y_pos * BALL_GAP + BALL_XY_OFFSET);
		ball[i].SetDelay(x_pos);
		ball[i].SetIsAlive(true);
	}
	eraser.Initialize();
	background.SetTopLeft(BACKGROUND_X,0);				// 設定背景的起始座標
	help.SetTopLeft(0, SIZE_Y - help.Height());			// 設定說明圖的起始座標
	hits_left.SetInteger(HITS_LEFT);					// 指定剩下的撞擊數
	hits_left.SetTopLeft(HITS_LEFT_X,HITS_LEFT_Y);		// 指定剩下撞擊數的座標
	CAudio::Instance()->Play(AUDIO_LAKE, true);			// 撥放 WAVE
	CAudio::Instance()->Play(AUDIO_NTUT, true);			// 撥放 MIDI

//---------------------------------由遊戲func來對敵人做初始化
	
	
	const int X_OFFEST = 200;//偏移數 用來對初始化的敵人位置設定的值
	static int X_POS = 250;//第一隻敵人的X座標初始位置
	srand((int)time(NULL));//亂數種子

	for (int k = 0; k < 5; k++) 	{		// 設定敵人的初始化座標
		int direction = rand()%1000+1; //亂數取得數值1到1000 決定敵人初始方位 1到500為左 
		int distance = rand()%5+1;		//用亂數來倍增距離
		enemy[k].SetIsLeft(direction); //設定方向
		enemy[k].SetX(X_POS + X_OFFEST * distance);//設定同物件的複數敵人的位置
		X_POS += 50; //讓距離變更大而已
		enemy[k].SetIsAlive(true);//設定每一隻敵人初始化存活
	}

}

void CGameStateRun::OnMove()							// 移動遊戲元素
{

/*
	//
	// 如果希望修改cursor的樣式，則將下面程式的commment取消即可
	//
	// SetCursor(AfxGetApp()->LoadCursor(IDC_GAMECURSOR));
	//
	// 移動背景圖的座標
	//
	if (background.Top() > SIZE_Y)
		background.SetTopLeft(60 ,-background.Height());
	background.SetTopLeft(background.Left(),background.Top()+1);
	//
	// 移動球
	//
	int i;
	for (i=0; i < NUMBALLS; i++)
		ball[i].OnMove();
	//
	// 移動擦子
	//
	eraser.OnMove();
	//
	// 判斷擦子是否碰到球
	//
	for (i=0; i < NUMBALLS; i++)
		if (ball[i].IsAlive() && ball[i].HitEraser(&eraser)) {
			ball[i].SetIsAlive(false);
			CAudio::Instance()->Play(AUDIO_DING);
			hits_left.Add(-1);
			//
			// 若剩餘碰撞次數為0，則跳到Game Over狀態
			//
			if (hits_left.GetInteger() <= 0) {
				CAudio::Instance()->Stop(AUDIO_LAKE);	// 停止 WAVE
				CAudio::Instance()->Stop(AUDIO_NTUT);	// 停止 MIDI
				GotoGameState(GAME_STATE_OVER);
			}
		}
	//
	// 移動彈跳的球
	//
	bball.OnMove();

*/
	hero.onMove(&map,enemy);
	int k;
	for( k=0;k<5;k++)
		enemy[k].onMove(&map,&hero);
	if(hero.IsAlive()==false){
		hero.onMove(&map,enemy);
		CAudio::Instance()->Stop(AUDIO_LAKE);	// 停止 WAVE
		CAudio::Instance()->Stop(AUDIO_NTUT);	// 停止 MIDI
		GotoGameState(GAME_STATE_OVER);
	}
}

void CGameStateRun::OnInit()  								// 遊戲的初值及圖形設定
{
	//
	// 當圖很多時，OnInit載入所有的圖要花很多時間。為避免玩遊戲的人
	//     等的不耐煩，遊戲會出現「Loading ...」，顯示Loading的進度。
	//
	ShowInitProgress(33);	// 接個前一個狀態的進度，此處進度視為33%
	//
	// 開始載入資料
	//
	int i;
	for (i = 0; i < NUMBALLS; i++)	
		ball[i].LoadBitmap();								// 載入第i個球的圖形
	eraser.LoadBitmap();
	background.LoadBitmap(IDB_BACKGROUND);					// 載入背景的圖形
	//
	// 完成部分Loading動作，提高進度
	//
	ShowInitProgress(50);
	Sleep(300); // 放慢，以便看清楚進度，實際遊戲請刪除此Sleep
	//
	// 繼續載入其他資料
	//
	help.LoadBitmap(IDB_HELP,RGB(255,255,255));				// 載入說明的圖形
	corner.LoadBitmap(IDB_CORNER);							// 載入角落圖形
	corner.ShowBitmap(background);							// 將corner貼到background
	bball.LoadBitmap();										// 載入圖形
	hits_left.LoadBitmap();									
	CAudio::Instance()->Load(AUDIO_DING,  "sounds\\ding.wav");	// 載入編號0的聲音ding.wav
	CAudio::Instance()->Load(AUDIO_LAKE,  "sounds\\lake.wav");	// 載入編號1的聲音lake.wav
	CAudio::Instance()->Load(AUDIO_NTUT,  "sounds\\ntut.mid");	// 載入編號2的聲音ntut.mid
	//
	// 此OnInit動作會接到CGameStaterOver::OnInit()，所以進度還沒到100%
	//


	map.LoadBitmap();
	hero.LoadBitmap();
	int k;
	for( k=0;k<5;k++)
		enemy[k].LoadBitmap();

}

void CGameStateRun::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	const char KEY_LEFT  = 0x25; // keyboard左箭頭
	const char KEY_UP    = 0x26; // keyboard上箭頭
	const char KEY_RIGHT = 0x27; // keyboard右箭頭
	const char KEY_DOWN  = 0x28; // keyboard下箭頭
	const char KEY_SPACE = 90;
	//const char KEY_UP    = ' ';
	if (nChar == KEY_LEFT )
			hero.SetMovingLeft(true);
	if (nChar == KEY_RIGHT)
			hero.SetMovingRight(true);	
	if (nChar == KEY_UP){
		if(!hero.IsAttack())
			hero.SetMovingUp(true);
	}
	if (nChar == KEY_SPACE)
		hero.SetMovingAttack(true);
	if (nChar == KEY_DOWN)
		hero.SetMovingDown(true);

}

void CGameStateRun::OnKeyUp(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	const char KEY_LEFT  = 0x25; // keyboard左箭頭
	const char KEY_UP    = 0x26; // keyboard上箭頭
	const char KEY_RIGHT = 0x27; // keyboard右箭頭
	const char KEY_DOWN  = 0x28; // keyboard下箭頭

	if (nChar == KEY_LEFT)
		hero.SetMovingLeft(false);
	if (nChar == KEY_RIGHT)
		hero.SetMovingRight(false);

		
/*
	if (nChar == KEY_UP)
		hero.SetMovingUp(false);

	if (nChar == KEY_DOWN)
		hero.SetMovingDown(false);
*/
}

void CGameStateRun::OnLButtonDown(UINT nFlags, CPoint point)  // 處理滑鼠的動作
{
	eraser.SetMovingLeft(true);
}

void CGameStateRun::OnLButtonUp(UINT nFlags, CPoint point)	// 處理滑鼠的動作
{
	eraser.SetMovingLeft(false);
}

void CGameStateRun::OnRButtonDown(UINT nFlags, CPoint point)  // 處理滑鼠的動作
{
	eraser.SetMovingRight(true);
}

void CGameStateRun::OnRButtonUp(UINT nFlags, CPoint point)	// 處理滑鼠的動作
{
	eraser.SetMovingRight(false);
}

void CGameStateRun::OnShow()
{
/*	

	//
	//  注意：Show裡面千萬不要移動任何物件的座標，移動座標的工作應由Move做才對，
	//        否則當視窗重新繪圖時(OnDraw)，物件就會移動，看起來會很怪。換個術語
	//        說，Move負責MVC中的Model，Show負責View，而View不應更動Model。
	//
	//
	//  貼上背景圖、撞擊數、球、擦子、彈跳的球
	//
	background.ShowBitmap();			// 貼上背景圖
	help.ShowBitmap();					// 貼上說明圖
	hits_left.ShowBitmap();
	for (int i=0; i < NUMBALLS; i++)
		ball[i].OnShow();				// 貼上第i號球
	bball.OnShow();						// 貼上彈跳的球
	eraser.OnShow();					// 貼上擦子
	//
	//  貼上左上及右下角落的圖
	//
	corner.SetTopLeft(0,0);
	corner.ShowBitmap();
	corner.SetTopLeft(SIZE_X-corner.Width(), SIZE_Y-corner.Height());
	corner.ShowBitmap();
*/
	
	map.onShow();
	for(int i=0;i<5;i++)
		enemy[i].onShow(&map);
	hero.onShow(&map);
}

//##############################################################################################//
//-------------------------------------------------------------------------------------
//遊戲地圖障礙
Cmap::Cmap():sx(0),sy(150){  //原來是120 +40 是因為跳下來時 
	
	BarrierW = 90;	//地圖裡以陣列來看每一格長多少(點)
	BarrierH = 30;	//地圖裡以陣列來看每一格高多少(點)
	numB_x=40;	//x軸共多少格
	numB_y=20;	//y軸共多少格
	MapW = BarrierW * numB_x;
	MapH = BarrierH * numB_y;
	
	for(int i=0; i< numB_x ;i++)
		for(int j=0;j< numB_y ;j++)
			if(i==0 || i==(numB_x-1) )
				map[i][j]=1;				//1為地圖兩邊的界線
			else
				map[i][j]=0;
			
	
	for(int i=0;i<numB_x;i++){
		map[i][numB_y-1]=2;			//2為地板
	    if(i<10&&i>6) map[i][numB_y-2]=2;		//testing!
	}
	map[6][4]=map[5][4]=map[7][4]=3;		//3為空中踩的障礙物
	map[4][7]=3;
	map[6][10]=3;
	map[8][13]=3;
	map[6][16]=3;
	
	
	
}
void Cmap::LoadBitmap(){
	barrier[0].LoadBitmap("Bitmaps/floor.bmp",RGB(0,0,0));
	barrier[1].LoadBitmap("Bitmaps/555.bmp",RGB(0,0,0));
	back_map[0].LoadBitmap("Bitmaps/back.bmp");
	back_map[1].LoadBitmap("Bitmaps/back.bmp");
	a.LoadBitmap(aaa);
}
void Cmap::onShow()
{
	back_map[0].SetTopLeft(0,0);
	back_map[0].ShowBitmap();
	

 	for (int i = 0; i < numB_x; i ++) {
		for (int j = 0; j < numB_y; j++) {
			int x = i*BarrierW - sx; // 算出第(i, j)這一格的x 螢幕座標
			int y = j*BarrierH - sy; // 算出第(i, j)這一格的y 螢幕座標
			switch (map[i][j]) {
				case 0:
					break;
				case 1:
					break;
				case 2:
					//a.SetTopLeft(x, y);
					//a.ShowBitmap();
					barrier[0].SetTopLeft(x, y-6); // 指定第(i, j)這一格的座標	座標的扣除是用來對修改障礙物圖片的調整
					barrier[0].ShowBitmap();
					break;
				case 3:
					//a.SetTopLeft(x, y);
					//a.ShowBitmap();
					barrier[1].SetTopLeft(x-10, y-6); // 指定第(i, j)這一格的座標	座標的扣除是用來對修改障礙物圖片的調整
					barrier[1].ShowBitmap();
					break;
				default:
					ASSERT(0);
			}
		}
	}
	
}
bool Cmap::IsEmpty(int x, int y){		// (x, y) 為地圖的點座標
	int gx = x / BarrierW;			// 轉換為格座標(整數除法)
	int gy = y / BarrierH;			// 轉換為格座標(整數除法)
	return map[gx][gy] == 0;		// 假設0 代表空的
}
int Cmap::ScreenX(int x){			// x 為地圖的點座標
	return x - sx;				// 回傳螢幕的x 點座標
}
int Cmap::ScreenY(int y) {			// y 為地圖的y 點座標
	return y - sy;				// 回傳螢幕的點座標
}
void Cmap::SetSX(int x){
	sx+=x;
}
void Cmap::SetSY(int y){
	sy+=y;
}
int Cmap::GetSX(){
	return sx;
}
int Cmap::GetSY(){
	return sy;
}
int Cmap::GetMapW(){
	return MapW;
}
int Cmap::GetMapH(){
	return MapH;
}
//-------------------------------------------------------------------------------------
//遊戲主角
Chero::Chero():x(120),y(350){
		
	const int INITIAL_VELOCITY = 14;	// 初始上升速度
	const int INITIAL_DOWNVELOCITY =1;  //初始下降速度
	Velocity = init_Velocity = INITIAL_VELOCITY;
	downVelocity = init_downVelocity = INITIAL_DOWNVELOCITY;   

	isMovingLeft = isMovingRight= isMovingUp = isMovingDown = isMovingAttack=false;
	
	HP=100;
	countBeHit = superTime = 40;	//約   (X 除30) 秒  無敵時間:受傷時有短暫的時間已免一直被怪物打
	is_alive = true;
	isOnsky=isLeft=beHit=false;	//isLeft:移動時如果停下來的時候要面向移動時的方向 如:像又停下來時即面向右
	Stab[0].SetDelayCount(3);	//攻擊的圖片時間縮改
	Stab[1].SetDelayCount(3);	//攻擊的圖片時間縮改

}

void Chero::jump(Cmap *m){
	if (Velocity > 0)
		y -= (Velocity)--;		// y軸上升(移動velocity個點)//受重力影響，下次的上升速度降低
	else
		onfloor(m);
	for(;y+76 < m->GetSY()+240-20;)//-20為螢幕的調整,當螢幕超過一半時,避免跳到障礙物後時,不會有螢幕震地(往下)的感覺 					
		m->SetSY(-1);//迴圈來扣減螢幕的移動
}

void Chero::onfloor(Cmap *m){ 
	Velocity = 0;//跳得過程不能再按跳	
	int count_floor=0;//初始劃離地高度
	if( isMovingDown && down_y==0 && !m->IsEmpty(x+50,y+76+1) && !m->IsEmpty(x+65,y+76+1) ) //有按下,且左右兩腳有踩著
		down_y=y;//記住踩著時的座標
	if(y > down_y+30)//30為障礙物的高度
		SetMovingDown(false);

	if(isMovingDown &&  GetY1()+76+30 < m->GetMapH() )
		for(count_floor=0 ; m->IsEmpty(x+50,y+76+30+count_floor) && m->IsEmpty(x+65,y+76+30+count_floor) ; count_floor++ ){}
	else{
		for(count_floor=0 ; m->IsEmpty(x+50,y+76+count_floor) && m->IsEmpty(x+65,y+76+count_floor) ; count_floor++ ){}	//計算離地高度
		down_y=0;
	}
	
	if (count_floor >= downVelocity)
		y += (downVelocity)++;		// y軸下降(移動velocity個點)// 受重力影響，下次的下降速度增加
	else{
		y +=count_floor;	//一次剛好到地
		
		SetMovingUp(false);
		//isOnsky=false;
		Velocity = init_Velocity;		// 重設上升初始速度
		downVelocity = init_downVelocity;	// 重設下降初始速度	
	}
	for(;y+76 > m->GetSY()+240 && y+76 <= m->GetMapH()-240+70;)
		m->SetSY(1);
}
void Chero::LoadBitmap(){

	
	BeHit.LoadBitmap("Bitmaps/hero/behit2.bmp",RGB(0,255,128));

	
	Jump[0].LoadBitmap("Bitmaps/hero/jump_r.bmp",RGB(0,255,128));
	Jump[1].LoadBitmap("Bitmaps/hero/jump_l.bmp",RGB(0,255,128));

	char *alert_r[4]={"Bitmaps/hero/alert_r01.bmp","Bitmaps/hero/alert_r02.bmp","Bitmaps/hero/alert_r03.bmp","Bitmaps/hero/alert_r02.bmp"};
	char *alert_l[4]={"Bitmaps/hero/alert_l01.bmp","Bitmaps/hero/alert_l02.bmp","Bitmaps/hero/alert_l03.bmp","Bitmaps/hero/alert_l02.bmp"};
	for (int i = 0; i < 4;i++){
		Alert[0].AddBitmap(alert_r[i], RGB(0,255,128));
		Alert[1].AddBitmap(alert_l[i], RGB(0,255,128));
	}

	char *walk_r[4]={"Bitmaps/hero/walk_r01.bmp","Bitmaps/hero/walk_r02.bmp","Bitmaps/hero/walk_r03.bmp","Bitmaps/hero/walk_r04.bmp"};
	char *walk_l[4]={"Bitmaps/hero/walk_l01.bmp","Bitmaps/hero/walk_l02.bmp","Bitmaps/hero/walk_l03.bmp","Bitmaps/hero/walk_l04.bmp"};
	for (int i = 0; i < 4;i++){
		Walk[0].AddBitmap(walk_r[i], RGB(0,255,128));
		Walk[1].AddBitmap(walk_l[i], RGB(0,255,128));
	}

	char *stab_r[4]={"Bitmaps/hero/stab_r01.bmp","Bitmaps/hero/stab_r03.bmp","Bitmaps/hero/stab_r03.bmp"};
	char *stab_l[4]={"Bitmaps/hero/stab_l01.bmp","Bitmaps/hero/stab_l03.bmp","Bitmaps/hero/stab_l03.bmp"};
	
	for (int i = 0; i < 3;i++){
		Stab[0].AddBitmap(stab_r[i], RGB(0,255,128));
		Stab[1].AddBitmap(stab_l[i], RGB(0,255,128));
	}
	
	
}
void Chero::onMove(Cmap *m,Cenemy *enemy){ // 注意：這是hero，不是map class
	const int STEP_SIZE = 7;
	Alert[0].OnMove();
	Alert[1].OnMove();

	if( IsAlive() ){
//   //--------------------------------------------------------------	
		for(int k=0;k<5;k++){	//用迴圈來讀同一種物件裡每一個敵人的記憶體位置 +k指向下一是個連續位置
			if( HitEnemy(enemy+k) && (enemy+k)->IsAlive() )  //有無碰觸到敵人,敵人是否仍存活		
					beHit=true;//被打設為true
			if(beHit){	//被攻擊
			
				if(countBeHit == superTime)//相同時
					HP-=20;	

				countBeHit--;//倒數用
				if(countBeHit==0 && HP>0){
					beHit=false;//表示無敵時間已結束
					countBeHit=superTime;//回到初始值
				}
				if(HP<=0) 
					SetIsAlive(false); //死亡
			}
		}	
		
//    //--------------------------------------------------------------	
		if(Stab[0].IsFinalBitmap()){			//攻擊動作完結，才能再打
			Stab[0].Reset();
			SetMovingAttack(false);
		}
		else if(Stab[1].IsFinalBitmap()){
			Stab[1].Reset();
			SetMovingAttack(false);
		}
//    //--------------------------------------------------------------
		if(isMovingAttack){						//攻擊判斷,攻擊中，圖片才動
			Stab[0].OnMove();
			Stab[1].OnMove();
		}
//    //--------------------------------------------------------------
		last_x = x;			//取上一座標，判斷座標用(左右) 用在貼圖判斷部分
															 				
		if(isMovingAttack && isMovingUp==false){}	//如果沒跳且在攻擊時進入此判斷,這樣就不會攻擊時仍然移動(攻擊圖片狀態滑動)				
		 else if (isMovingRight && m->IsEmpty(x+89,y+75)){	//右移動 往右且右沒東西	
				Walk[0].OnMove();
				for(;x+60+STEP_SIZE > m->GetSX()+320  && x+60 < m->GetMapW()-320;) //螢幕跟著調整
					m->SetSX(1);
				x += STEP_SIZE;

		}
																			
		if(isMovingAttack && isMovingUp==false){}	//如果沒跳且在攻擊時進入此判斷,這樣就不會攻擊時仍然移動(攻擊圖片狀態滑動)		
		else if (isMovingLeft && m->IsEmpty(x+23-1,y+75)){	//左移動	往左且左沒東西	
			Walk[1].OnMove();
			for(;x+60-STEP_SIZE < m->GetSX()+320 && x+60 > 320;)	//螢幕跟著調整 60是人物圖片的中間位置
				m->SetSX(-1);
			x -= STEP_SIZE;
		}
//    //--------------------------------------------------------------


//    //--------------------------------------------------------------
		last_y=y;	//用在貼圖判斷部分

		if (isMovingUp)						//跳越
			jump(m);
		else						//落地
			onfloor(m);
	}
	else{//活著
		HP=100;
		SetIsAlive(true);
	}
		
}
void Chero::onShow(Cmap *m) // 注意：這是hero，不是map class
{
	if( !IsAlive() ){}
	else if(beHit && countBeHit%4 == 0){	//countBeHit %4 ==0 --->%4(閃爍速度，越大越慢) countBeHit扣減時取能使餘數為0的值並在那個時候閃爍圖片一次
			BeHit.SetTopLeft(m->ScreenX(x), m->ScreenY(y));
			BeHit.ShowBitmap();
	}
	else if(isLeft && isMovingAttack ){								//同時在左和攻擊
		Stab[1].SetTopLeft(m->ScreenX(x)-52, m->ScreenY(y));
		Stab[1].OnShow();
	}
	else if(isMovingAttack){									//按攻擊
		Stab[0].SetTopLeft(m->ScreenX(x), m->ScreenY(y));
		Stab[0].OnShow();
	}
	else if(!isLeft && last_y!=y && x>=last_x){				//同時按跳和角色位在右邊(不在左邊)
		Jump[0].SetTopLeft(m->ScreenX(x), m->ScreenY(y));
		Jump[0].ShowBitmap();
	}
	else if(isLeft && last_y!=y && x<=last_x){					//是否面向左邊同時判斷有無按跳
		Jump[1].SetTopLeft(m->ScreenX(x), m->ScreenY(y));
		Jump[1].ShowBitmap();
	}
	else if(x>last_x ){											//在右邊 座標判斷方向
		Walk[0].SetTopLeft(m->ScreenX(x), m->ScreenY(y)); 
		Walk[0].OnShow();
		isLeft=false;
	}
	else if(x<last_x ){											//在左邊
		Walk[1].SetTopLeft(m->ScreenX(x), m->ScreenY(y)); 
		Walk[1].OnShow();
		isLeft=true;
	}
	else if(!isLeft && last_x==x){								//面向右邊 座標沒移動
		Alert[0].SetTopLeft(m->ScreenX(x), m->ScreenY(y)); 
		Alert[0].OnShow();
	}
	else if(isLeft ){											//面向左邊
		Alert[1].SetTopLeft(m->ScreenX(x), m->ScreenY(y)); 
		Alert[1].OnShow();
	}
	ShowHP(HP,m);

}
void Chero::ShowHP(int percent,Cmap *m){
	if (!SHOW_LOAD_PROGRESS)
		return;
	const int bar_width = 90;		
	const int bar_height = 6;		
	const int x1 = m->ScreenX(x+11); //
	const int x2 = x1 + bar_width;
	const int y1 = m->ScreenY(y-15); //
	const int y2 = y1 + bar_height;
	const int pen_width = 1;//bar_height / 5;
	const int progress_x1 = x1 + pen_width;
	const int progress_x2 = progress_x1 + percent * (bar_width-2*pen_width) / 100;
	const int progress_x2_end = x2 - pen_width;
	const int progress_y1 = y1 + pen_width;
	const int progress_y2 = y2 - pen_width;

	
	CDC *pDC = CDDraw::GetBackCDC();			// 取得 Back Plain 的 CDC 
	CPen *pp, p(PS_NULL, 0, RGB(0,0,0));		// 清除pen
	pp = pDC->SelectObject(&p);

	CBrush *pb, b(RGB(255,255,0));				// 畫黃色 progress框
	pb = pDC->SelectObject(&b);
	pDC->Rectangle(x1,y1,x2,y2);				

	CBrush b1(RGB(220,160,160)/*DEFAULT_BG_COLOR*/);				// 畫黑色 progrss中心
	pDC->SelectObject(&b1);
	pDC->Rectangle(progress_x1,progress_y1,progress_x2_end,progress_y2);

	CBrush b2(RGB(255,0,0));					// 畫紅色 progrss進度
	pDC->SelectObject(&b2);
	pDC->Rectangle(progress_x1,progress_y1,progress_x2,progress_y2);

	pDC->SelectObject(pp);						// 釋放 pen
	pDC->SelectObject(pb);						// 釋放 brush
	CDDraw::ReleaseBackCDC();					// 放掉 Back Plain 的 CDC

}
void Chero::SetMovingDown(bool flag){
	isMovingDown = flag;
}

void Chero::SetMovingLeft(bool flag){
	isMovingLeft = flag;
}

void Chero::SetMovingRight(bool flag){
	isMovingRight = flag;
}

void Chero::SetMovingUp(bool flag){
	isMovingUp = flag;
}

void Chero::SetMovingAttack(bool flag){
	isMovingAttack = flag;
}
bool Chero::IsLeft(){
	return isLeft;
}
bool Chero::IsAttack(){
	return isMovingAttack;
}

bool Chero::IsAlive(){
	return is_alive;
}
void Chero::SetIsAlive(bool flag){
	is_alive = flag;
}
int Chero::GetX1(){
	return x;
}
int Chero::GetY1(){
	return y;
}
int Chero::GetX2(){
	return x + Stab[0].Width();;
}
int Chero::GetY2(){
	return y + Stab[0].Height();
}
bool Chero::HitEnemy(Cenemy *e){//被怪打
	
		return HitRectangle(e->GetX1(), e->GetY1(),e->GetX2(), e->GetY2());

}
bool Chero::HitRectangle(int tx1, int ty1, int tx2, int ty2){	// 是否碰到參數範圍的矩形
	int x1 = x+43;				// 球的左上角x座標
	int y1 = y+7;				// 球的左上角y座標
	int x2 = x + 67;	// 球的右下角x座標
	int y2 = y + 75;	// 球的右下角y座標
	//
	// 檢測球的矩形與參數矩形是否有交集
	//
	return (tx2 >= x1 && tx1 <= x2 && ty2 >= y1 && ty1 <= y2);
}


//-------------------------------------------------------------------------------------
//敵人



Cenemy::Cenemy():x(0),y(515){
	// remember設定方向!
	is_alive = true;
	beHit=false;
	isLeft=false;
	HP=100;
	countBeHit=15;//受傷閃爍時間
	recover_count=100; // 復活的時間 約3~5秒多
	

	Move[0].SetDelayCount(6);
	Move[1].SetDelayCount(6);
}

void Cenemy::SetX(int x_pos)
{
	x = x_pos;
	fix_x = x_pos;
}

int Cenemy::GetFx() const {return fix_x;}

void Cenemy::SetIsLeft(int d)
{
	if(0<d &&500>d)isLeft = true; //0~500為左邊
	else isLeft = false; 
	 
}

void Cenemy::LoadBitmap(){
	char *move_r[3]={"Bitmaps/enemy/devil_cat/move_r01.bmp","Bitmaps/enemy/devil_cat/move_r02.bmp","Bitmaps/enemy/devil_cat/move_r03.bmp"};
	char *move_l[3]={"Bitmaps/enemy/devil_cat/move_l01.bmp","Bitmaps/enemy/devil_cat/move_l02.bmp","Bitmaps/enemy/devil_cat/move_l03.bmp"};
	for (int i = 0; i < 3;i++){
		Move[0].AddBitmap(move_r[i], RGB(0,255,128));
		Move[1].AddBitmap(move_l[i], RGB(0,255,128));
	}
	BeHit[0].LoadBitmap("Bitmaps/enemy/devil_cat/behit_r.bmp",RGB(0,255,128));
	BeHit[1].LoadBitmap("Bitmaps/enemy/devil_cat/behit_l.bmp",RGB(0,255,128));
	
}

void Cenemy::onMove(Cmap* m,Chero *h){
	last_x=x; //上一個座標儲存 用在貼圖判斷
	Move[0].OnMove();
	Move[1].OnMove();
	if(IsAlive()){//存活時
		if( h->IsAttack() && HitHero(h)){
			beHit=true;
			if(h->IsLeft()) isLeft=false;
			else	isLeft=true;	
		}
		if(beHit){ //被攻擊時 扣血還有閃爍
			
			if((countBeHit)--==15){ //countBeHit給電腦計算秒數用
				HP-=20;
				if(isLeft)x++; //判斷入前方向再向後退
				else x--;
			}
			if(countBeHit==0){
				beHit=false;
				countBeHit=15;//回復初始值 
			}
		}	
		else{//怪物移動的範圍
			
			if(x<GetFx()+100 && !isLeft) x+=2;
			else isLeft=true;
	
			if(x>GetFx()-100 && isLeft)  x-=2;
			else isLeft=false;
		}
		if(HP<=0){//沒血時
			beHit=false; //設定狀態為死亡		
			SetIsAlive(false);
		}
		
	}
	else{			//死亡
		recover_count--;	//計算倒數
		if(recover_count==0){	//復活
			SetIsAlive(true);
			recover_count=100;
			HP=100;
		}	
	}
}

void Cenemy::onShow(Cmap* m){
	int ex = x - m->GetSX();
	int ey = y - m->GetSY();
	

	if( IsAlive() ){
		
		
		if(!isLeft && last_x <= x){
			if(beHit){
				BeHit[0].SetTopLeft(ex,ey-3);
				BeHit[0].ShowBitmap();
			}
			else{
				Move[0].SetTopLeft(ex,ey);
				Move[0].OnShow();
			}
			
		}
		else if(isLeft && last_x >= x){
			if(beHit){
				BeHit[1].SetTopLeft(ex,ey-3);
				BeHit[1].ShowBitmap();
			}
			else{
				Move[1].SetTopLeft(ex,ey);
				Move[1].OnShow();
			}
			
		}
		ShowHP(HP,m);
	

	}
}
bool Cenemy::IsAlive(){
	return is_alive;
}
void Cenemy::SetIsAlive(bool alive){
	is_alive = alive;
}
bool Cenemy::HitHero(Chero *h){//被主角打
	if(h->IsLeft())//主角圖片面向時的位置回傳
		return HitRectangle(h->GetX1()+0-52, h->GetY1()+50,h->GetX2()-62-52, h->GetY2()-14);
	else 
		return HitRectangle(h->GetX1()+102, h->GetY1()+50,h->GetX2()-1, h->GetY2()-16);
}
bool Cenemy::HitRectangle(int tx1, int ty1, int tx2, int ty2){	// 是否碰到參數範圍的矩形
	int x1 = x;				// 球的左上角x座標
	int y1 = y;				// 球的左上角y座標
	int x2 = x1 + Move[0].Width();	// 球的右下角x座標
	int y2 = y1 + Move[0].Height();	// 球的右下角y座標
	//
	// 檢測球的矩形與參數矩形是否有交集
	//
	return (tx2 >= x1 && tx1 <= x2 && ty2 >= y1 && ty1 <= y2);
}
 int Cenemy::GetX1(){
	return x;
}
int Cenemy::GetY1(){
	return y;
}
int Cenemy::GetX2(){
	return x + Move[0].Width();;
}
int Cenemy::GetY2(){
	return y + Move[0].Height();
}

void Cenemy::ShowHP(int percent,Cmap *m){
	if (!SHOW_LOAD_PROGRESS)
		return;
	const int bar_width = 60;		
	const int bar_height = 6;		
	const int x1 = m->ScreenX(x-8); //
	const int x2 = x1 + bar_width;
	const int y1 = m->ScreenY(y-15); //
	const int y2 = y1 + bar_height;
	const int pen_width = 1;//bar_height / 5;
	const int progress_x1 = x1 + pen_width;
	const int progress_x2 = progress_x1 + percent * (bar_width-2*pen_width) / 100;
	const int progress_x2_end = x2 - pen_width;
	const int progress_y1 = y1 + pen_width;
	const int progress_y2 = y2 - pen_width;

	
	CDC *pDC = CDDraw::GetBackCDC();			// 取得 Back Plain 的 CDC 
	CPen *pp, p(PS_NULL, 0, RGB(0,0,0));		// 清除pen
	pp = pDC->SelectObject(&p);

	CBrush *pb, b(RGB(255,255,0));				// 畫黃色 progress框
	pb = pDC->SelectObject(&b);
	pDC->Rectangle(x1,y1,x2,y2);				

	CBrush b1(RGB(220,160,160)/*DEFAULT_BG_COLOR*/);				// 畫黑色 progrss中心
	pDC->SelectObject(&b1);
	pDC->Rectangle(progress_x1,progress_y1,progress_x2_end,progress_y2);

	CBrush b2(RGB(255,0,0));					// 畫紅色 progrss進度
	pDC->SelectObject(&b2);
	pDC->Rectangle(progress_x1,progress_y1,progress_x2,progress_y2);

	pDC->SelectObject(pp);						// 釋放 pen
	pDC->SelectObject(pb);						// 釋放 brush
	CDDraw::ReleaseBackCDC();					// 放掉 Back Plain 的 CDC

}



}